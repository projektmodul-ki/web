import { S3Client, ListObjectsV2Command } from "@aws-sdk/client-s3";
import { Navigation } from "@/components/navigation";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";

interface ArtworkImage {
  key: string;
  filename: string;
  url: string;
  lastModified?: string;
}

// Server-side function to fetch images (for initial page load)
async function getArtworkImages(page: number = 1, limit: number = 6): Promise<{
  images: ArtworkImage[];
  total: number;
  hasMore: boolean;
}> {
  const s3Client = new S3Client({
    region: "auto",
    endpoint: `https://${process.env.CLOUDFLARE_ACCOUNT_ID}.r2.cloudflarestorage.com`,
    credentials: {
      accessKeyId: process.env.CLOUDFLARE_R2_ACCESS_KEY_ID!,
      secretAccessKey: process.env.CLOUDFLARE_R2_SECRET_ACCESS_KEY!,
    },
  });

  try {
    // Check if required environment variables are set
    if (
      !process.env.CLOUDFLARE_ACCOUNT_ID ||
      !process.env.CLOUDFLARE_R2_ACCESS_KEY_ID ||
      !process.env.CLOUDFLARE_R2_SECRET_ACCESS_KEY ||
      !process.env.CLOUDFLARE_R2_BUCKET_NAME
    ) {
      console.error("Missing required environment variables");
      return { images: [], total: 0, hasMore: false };
    }

    const command = new ListObjectsV2Command({
      Bucket: process.env.CLOUDFLARE_R2_BUCKET_NAME!,
      Prefix: "images/", // Images are stored in the images/ folder
    });

    const response = await s3Client.send(command);

    // Filter for image files and sort by LastModified (most recent first)
    const allImageFiles =
      response.Contents?.filter((item) =>
        item.Key?.match(/\.(png|jpg|jpeg|gif|webp)$/i)
      ).sort((a, b) => {
        // Sort by LastModified in descending order (most recent first)
        const dateA = a.LastModified ? new Date(a.LastModified).getTime() : 0;
        const dateB = b.LastModified ? new Date(b.LastModified).getTime() : 0;
        return dateB - dateA;
      }).map((item) => ({
        key: item.Key!,
        filename: item.Key!.split("/").pop()!,
        url: `/api/images/${item.Key}`,
        lastModified: item.LastModified?.toISOString(),
      })) || [];

    // Apply pagination
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedImages = allImageFiles.slice(startIndex, endIndex);

    return {
      images: paginatedImages,
      total: allImageFiles.length,
      hasMore: endIndex < allImageFiles.length
    };
  } catch (error) {
    console.error("Error fetching artworks:", error);
    return { images: [], total: 0, hasMore: false };
  }
}

export default async function ArtworksSSR() {
  const result = await getArtworkImages(1, 6); // Load first 6 images
  const { images, total, hasMore } = result;

  return (
    <div className="min-h-screen bg-white">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-24 pb-4 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <Link
            href="/"
            className="inline-flex items-center text-gray-600 hover:text-black transition-colors duration-200 mb-8"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Home
          </Link>

          <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-black leading-tight mb-8">
            Artworks
          </h1>

          <p className="text-xl text-gray-600 leading-relaxed">
            Discover artworks generated by various people using our
            installation. Take a look at the creativity and innovation that has
            emerged from our community.
          </p>
        </div>
      </section>

      {/* Image grid aspect ratio 1/1 */}
      <section className="py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {images.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-600">No artworks found.</p>
            </div>
          ) : (
            <>
              <div className="text-center mb-8">
                <p className="text-gray-600">
                  Showing {images.length} of {total} artworks (Server-side rendered)
                </p>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                {images.map((image) => (
                  <div
                    key={image.key}
                    className="aspect-square bg-gray-200 rounded-lg overflow-hidden"
                  >
                    <img
                      src={image.url}
                      alt={`Interactive artwork ${image.filename}`}
                      className="w-full h-full object-cover"
                      loading="lazy"
                    />
                  </div>
                ))}
              </div>
              {hasMore && (
                <div className="text-center mt-12">
                  <p className="text-gray-600">
                    Note: This is the SSR version. Use the main page for "Load more" functionality.
                  </p>
                </div>
              )}
            </>
          )}
        </div>
      </section>
    </div>
  );
}
